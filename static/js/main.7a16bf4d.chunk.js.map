{"version":3,"sources":["components/Card.js","components/CovidSummary.js","components/LineGraph.js","axios.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","country","style","textTransform","display","justifyContent","value","displayType","thousandSeparator","LineGraph","width","height","margin","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","axiosInstance","axios","create","baseURL","headers","App","useState","settotalConfirmed","settotalRecovered","settotalDeaths","loading","setloading","covidSummary","setcovidSummary","days","setdays","setcountry","coronaCountAr","setcoronaCountAr","setlabel","useEffect","get","then","res","status","Global","TotalConfirmed","NewRecovered","TotalDeaths","console","log","catch","error","formatDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportByDateRange","countrySlug","from","to","yAxisCoronaCount","Cases","xAxisLabel","covidDetails","Countries","find","Slug","TotalRecovered","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a16bf4d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Card(props) {\r\n    return (\r\n        <div className=\"card\">\r\n          { props.children} \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Card from './Card';\r\nimport Numberformat from \"react-number-format\";\r\n\r\nconst CovidSummary = (props) => {\r\n\r\n    const{\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        country\r\n    } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1 style={{textTransform:'capitalize'}}>{country === '' ? 'World Wide Corona Report' : country}</h1>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center'\r\n                }}>\r\n                    <Card>\r\n                        <span>Total Confirmed </span>\r\n                        <span>{\r\n                            <Numberformat \r\n                             value={totalConfirmed} \r\n                             displayType={'text'}\r\n                             thousandSeparator={true}\r\n                        />\r\n                        }</span>\r\n                    </Card>\r\n                    <Card>\r\n                        <span>Total Recovered </span>\r\n                        <span>{\r\n                            <Numberformat \r\n                             value={totalRecovered} \r\n                             displayType={'text'}\r\n                             thousandSeparator={true}\r\n                        />}</span>\r\n                    </Card>\r\n                    <Card>\r\n                        <span>Total Deaths</span>\r\n                        <span> {\r\n                            <Numberformat \r\n                             value={totalDeaths} \r\n                             displayType={'text'}\r\n                             thousandSeparator={true}\r\n                        />\r\n                        }</span>\r\n                    </Card>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CovidSummary\r\n\r\n\r\n","import React from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction LineGraph(props) {\r\n    return (\r\n        <div \r\n        style={{\r\n            width:'600px',\r\n            height:'600px',\r\n            margin:'50px auto'\r\n        }}\r\n        >\r\n            <Line data={{\r\n                labels: props.label.map(l => l.substr(0, 10)),\r\n                datasets: [\r\n                    {\r\n                        label: 'Corona Cases across the country',\r\n                        fill: true,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(75,192,192,0.4)',\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(75,192,192,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: [props.yAxis]\r\n                    }\r\n                ]\r\n                    }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import  axios  from \"axios\";\r\n\r\nconst axiosInstance =axios.create({\r\n    baseURL:`https://api.covid19api.com`,\r\n    headers:{'X-Access-Token':'5cf9dfd5-3449-485e-b5ae-70a60e997864'}\r\n});\r\n\r\nexport default axiosInstance;","import React, { useState, useEffect } from 'react'\nimport \"./App.css\";\nimport CovidSummary from './components/CovidSummary';\nimport LineGraph from './components/LineGraph';\nimport axios from './axios'\nfunction App() {\n    const [totalConfirmed, settotalConfirmed] = useState(0)\n    const [totalRecovered, settotalRecovered] = useState(0)\n    const [totalDeaths, settotalDeaths] = useState(0)\n    const [loading, setloading] = useState(false)\n    const [covidSummary, setcovidSummary] = useState({})\n    const [days, setdays] = useState(7)\n    const [country, setcountry] = useState('')\n    const [coronaCountAr, setcoronaCountAr] = useState([])\n    const [label, setlabel] = useState([])\n    useEffect(() => {\n        setloading(true);\n\n        axios.get('/summary')\n\n            .then(res => {\n                setloading(false);\n\n                if (res.status === 200) {\n                    settotalConfirmed(res.data.Global.TotalConfirmed)\n                    settotalRecovered(res.data.Global.NewRecovered)\n                    settotalDeaths(res.data.Global.TotalDeaths)\n                    setcovidSummary(res.data)\n                }\n                console.log(res);\n            })\n            .catch(error => {\n                console.log(error);\n\n            })\n\n    }, []);\n\n    const formatDate = (date) => {\n        const d = new Date(date)\n        const year = d.getFullYear()\n        const month = `0${d.getMonth() + 1}`.slice(-2)\n        const _date = d.getDate()\n        return `${year}-${month}-${_date}`\n    }\n\n    const countryHandler = (e) => {\n\n        setcountry(e.target.value);\n        const d = new Date()\n        const to = formatDate(d)\n        const from = formatDate(d.setDate(d.getDate() - days))\n        getCoronaReportByDateRange(e.target.value, from, to)\n    }\n    const daysHandler = (e) => {\n        setdays(e.target.value)\n        const d = new Date()\n        const to = formatDate(d)\n        const from = formatDate(d.setDate(d.getDate() - e.target.value))\n        getCoronaReportByDateRange(country, from, to)\n    }\n\n    const getCoronaReportByDateRange = (countrySlug, from, to) => {\n        axios.get(`/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n            .then(res => {\n                console.log(res);\n                const yAxisCoronaCount = res.data.map(d => d.Cases)\n                const xAxisLabel = res.data.map(d => d.Date)\n                const covidDetails = covidSummary.Countries.find(country => country.Slug === countrySlug)\n\n                setcoronaCountAr(yAxisCoronaCount)\n\n                settotalConfirmed(covidDetails.TotalConfirmed)\n                settotalRecovered(covidDetails.TotalRecovered)\n                settotalDeaths(covidDetails.TotalDeaths)\n                setlabel(xAxisLabel)\n            })\n            .catch(error => {\n                console.log(error);\n\n            })\n    }\n\n    if (loading) {\n        return <p>Fetching data from api...!</p>\n    }\n    return (\n        <div className=\"App\">\n            <CovidSummary\n                totalConfirmed={totalConfirmed}\n                totalRecovered={totalRecovered}\n                totalDeaths={totalDeaths}\n                country={country}\n            />\n            <div className=\"select\">\n                <select value={country} onChange={countryHandler} >\n                    <option value=\"\">Select Country</option>\n                    {\n                        covidSummary.Countries && covidSummary.Countries.map(country =>\n                            <option key={country.Slug} value={country.Slug}>{country.Country}</option>)\n                    }\n                </select>\n                <select value={days} onChange={daysHandler}>\n                    <option value=\"7\">Last 7 days</option>\n                    <option value=\"30\">Last 30 days</option>\n                    <option value=\"90\">Last 90 days</option>\n                </select>\n            </div>\n\n            <LineGraph\n                yAxis={coronaCountAr}\n                label={label} />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}